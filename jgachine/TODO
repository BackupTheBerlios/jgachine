 - security: client and server are completely insecure !!
	client: improve MySecurityManager - review libgcj ;-)
	server: either add a SecurityManager or at least fix the
		file/resource upload 
		(perhaps simply use http for this - problem: then you
		must keep your server code in sync with the code you
		serv via http... not a real problem is it?
		many people do not have a http server - perhaps ship
		with a minimalistic one => the same security problems
		again;-)
- input: 
	user definable keys
	not only gamepad like input devices? (mouse? analog joy?...)

- networking: 
	distributed scene graph (is it possible to do a general one
	working good enough for interactive realtime games?)
	yes i think so
	first step would be a simple one
	second step would be some intelligent nodes/distribution
	for realtime games
	and of course the game programer can extend the client and
	server => he can add special nodes for his game
	(f.e. some node moving on a bezier curve ....)

	simple scene graph:
		needs way to send complete scene graph to client
		(serialization/pickling)
		first improvement would be to only update partially
		either transfer nodes or do somthing like rmi
		in fact this is a distributed database
		a generic aproach would be to use proxy classes
		which update the server object as well as the client
		object - this could be done with dynamic proxies
		the java ones only work with interfaces which is in
		fact the correct thing as access to member variables
		can't be intercepted/proxied
		unfortunately the bad thing of this is that you often
		want to proxy classes that do not implement interfaces
		=> create corresponding interface and derived class
		implementing that interface :-((
		this could also be done at runtime
		of course this would be stupid and will not actually
		be done but this could be the description of the process
		"you don't actually proxy a class - you proxy a interface
		implied by this class ;-)" 

	intelligent/complex scene graph:
		at least interpolate
		=> moving nodes (speed, acceleration)
		integrate on client side
		from time to time send node to client
		adjust as neccessary
		(do it like adic does)

	synchronous vs. asynchronous vs. both handling:
		completely asynchronous:
			simple to implement but difficult to use
		completely synchronous:
			simple to implement but introduces
			unneccessary lag
		both:
			handle manually: difficult to use
			automatic: difficult to implement

	server: make base code optional part of jgachine?
		threading issues
	NetResourceLoader:
		todo: in the moment only one outstanding resource
		request permitted

- sound: completely missing
	use SDL_mixer again?

- video:
	* menu:
		just started to create simple menu
	* better font / or better text handling in general
	* performance: in the moment we assume hardware accelerated OpenGL 
	  is available (premature optimization is ...)
	* sdlopengl: in the moment we have GL_BLEND always on
	  (this causes a big slowdown at least with my gf2 mx -
	   switch it on/off as needed)
	* motion blur:
		okay i did a fullscreen motion blur with glCopyTexSubImage2D
		that does not need any user interaction
		what is bad with it?
		the last frame drawn is blended with old frames
		=> everything is smooth => not what I want
		I want the last "frame" sharp ... bad explanation...
		I want to only blur moving objects but the current position is
		not blended/blured. => it must be differentiated between the changing
		screen area and unchanging or better between moving objects and background
		the latter would require the user to specify this
		it could be done using the depth buffer which i did not use so far at all
		another possibility would be to do it with the scenegraph manually
		for now i disable motion blur
		btw could have done the same effect in a much simpler way:
			don't clear the framebuffer
			(perhaps copy front to back buffer)
			draw scene alpha blended
		the tutorial (pong) does motion blur manually now
	* let user configure: if he wants fullscreen, resolution, bpp
	  unfortunately there seems to be no way to simply use the current
	  video settings with SDL (in fullscreen mode)
	  we can fix this with some native code and support from SDL
	  suggestion from SDL ML for x11 driver (Stephan Ferraro)
		  SDL_SysWMinfo         info;
		  SDL_GetWMInfo(&info);
		  w = DisplayWidth(info.info.x11.display, 0);
		  h = DisplayHeight(info.info.x11.display, 0);
	* multiple lines
	* triangles
	* polygons (filled/textured?)
	* circles
	* curves? (bezier/b-spline)
	* animations (mng? mpeg? avi? mpeg?):
		SDL_Image does not support multiple images/animations
		no open source pure java mng implementation available
		perhaps use libmng directly 
	* svg to code converter?

- collision detection:
	optional collision detection system would be nice

- scenegraph:
	perhaps it is a bad idea to use subclasses, better use interfaces?
	add some useful stuff like menus / animations / ...

- build:
	create portable binaries (just read about lsb tools....):
		this time i will not build static/semi-static ones
		=> i could remove my dlopen opengl stuff from the video part
		(but i used this to get mesa offscreen working on framebuffer...)
		ship with libraries and set LD_LIBRARY_PATH (perhaps optional...)
		its not that easy - would require a corresponding build environment
		including a working gcj - for now there are only linux binaries
		for debian/testing
	java support of automake sucks (the non-gcj stuff)

	debian package:
		for now i have 2 packages: jgachine and libjgachine
		the libjgachine is intended to hold the class library needed to develop
		a game (for now it includes some data files, too)
		jgachine depends on libjgachine (is it neccessary? - everything is
		included in the binary because it was compiled to native code
		=> should not be neccessary)
		=> jgachine should not depend on libjgachine - but until i remove the
		jpong script from jgachine and libjgachine includes the java game
		examples it is like that
		if i change this perhaps a good idea would be:
		jgachine (the package contains everything needed to play games)
		jgachine-dev (contains everything needed to develop games)
		jgachine-games (contains example games)
		jgachine-doc (documentation)
		but this would be overkill
		2 packages are enough - one which is arch dependant and one which is not
		but perhaps libjgachine should really be called jgachine-dev
	
- java signal/slot:
	at the moment only one object may be passed to a slot (signal consists of
	one object)
	but the server could use arrays (methods with multiple parameters 
	=> slots with multiple objects)
	perhaps we should use a more "standard" event system

- tutorial:
	started with a pong
	perhaps completely split it out of the core package
	to get a realistic tutorial
	split screen demo
	menu demo
	
- scheduling:
	still sucks
	linux kernel 10ms (2.4)
	perhaps test 2.6 ;-)
	win98: evil (is it the garbage collector or another problem? - it happens
	on input?)
	java increases the problem with its garbage collector
	nvidia's drivers do a busy loop while waiting for retrace
		(at least up to version 1.0-4191)
	with motion blur one can sleep for a long time
	=> will not get interrupted that often and it looks great anyway
	(but perhaps this is a matter of taste)
	
--------------------------------------------------------------------------------
was ich probieren wollte:
der classloader auf client seite laedt die class objekte einfach
ueber den objectstream




grad habe ich ein synchronisationsproblem beim server
da muss ich sowieso alles nochmal durchdenken
und mich nochmal richtig einarbeiten wie das bei java
funktioniert

das problem ist im moment dass 2 verschiedene threads auf den stream schreiben
bzw. eigentlich das der game thread auf den stream schreibt bevor the serverthread
den request vom client beantwortet hat
also meine synchron vs. asynchron geschichte

this is a bug in NetResourceLoader.java


also
was habe ich noch gemacht
will das letzte problem umgehen
jetzt hätte ich es erstmal hingetrickts indem
der server nix unaufgefordert schickt
das wäre zum testen erstmal ganz nett aber keine lsg.
was wären lösungen?
- mehrere sockets (mag ich nicht)
- stream multiplexen
- eigentlichen fehler finden
- vermeiden dass classloader readObject aufrufen und damit wieder einen
  classload aufrufen kann (siehe aber auch eigentlichen fehler finden)
  mir gefällt das nicht, daß der classloader sowas machen kann aber
  der bug daran ist mir noch nicht klar weil ja in meinem fall eh
  der system classloader benutzt wird - also nicht der selbe ...
  hmmmm

evtl. ist das auch ein bug in libgcj !!



aber ich möchte mich jetzt glaube ich schon erstmal auf das server
interface konzentrieren also der eigentliche netzwerkpart
aber den reinen clientteil will ich auch nicht vernachlässigen
also 2 schöne APIS sollen es sein für einsteiger
einfache netzwerkspiele für die massen
und einfache einzelspieler bzw. einzelrechner spiele
...
die ganzen multithread geschichten muss ich genau machen
bisher habe ich ja das nur hingepfuscht


okay ein problem habe ich jetzt endlich erkannt:
ich muss eigentlich den system classloader ändern
was eigentlich über ein property gehen sollte (laut docu)
java.system.class.loader
(beim gcj mit -Djava.system.class.loader=org.jgachine.MyClassLoader)
zu setzen

warum?
da der system classloader nicht zur laufzeit gewechselt werden kann
und dann nur objekte die mit meinem classloader geladen wurden diesen
auch weiter verwenden

anscheinend ist das im gcc 3.4 gfixt?
nee noch nicht
habe aber bug reported

jetzt muss ich mir halt nen workaround überlegen
zum beispiel koennte ich den ObjectInputStream über meinen ClassLoader
laden
das sollte gehen



also
ich ignoriere jetzt erstmal den bug
funktioniert halt das mit dem remote laden von klassen erstmal nicht
aber da kann ich mir immernoch einen workaround ueberlegen
jetzt will ich erstmal das verteilte beispiel zum laufen kriegen
momentan habe ich 2 szenegraphen
einen fuer die serverseite einen fuer die clientseite
im moment ist das fast nur duplizierte arbeit
und ich muesste jetzt den einen in den anderen transformieren
obwohl sich fast nix ändert
das ist sehr haesslich
auf der anderen seite können sie die beiden szenengraphen später
durchaus sehr unterscheiden
eine alternative waere ein abstrakter szenegraph
und auf clientseite irgendwie ein adapter der ihn dann malt usw.
da waere dann auch an sowas wie "glCompile" zu denken / displaylist


also es geht voran
jetzt muss ich aber doch das protokoll problem loesen
das einfachste waere 2 verbindungen
auf der einen gibt der server den ton an (client schickt nichts ungefragt)
auf der anderen ist es umgekehrt

alternativ koennte ich das aushandeln
oder multiplexen

aber bleibt da nicht noch ein problem?
wenn ein synchroner request rausgeht
kann kein zweiter abgesetzt werden
das heisst wenn eine antwort reinkommt die wieder einen synchronen request
braucht um verarbeitet zu werden gehts nicht
beispiel?
antwort enthält objekt einer klasse die vom server geladen werden muss
das ist dieser richtig dumme fall den ich nicht vergessen darf

am allereinfachsten wäre für diesen ganzen kram http zu benutzen
oder halt selber einfach für solche wecke verbindung aufbauen und danach
abbauen
eigentlich ist das garnicht so dumm
das geht immer mehr in richtung java applets ;-)
das beste wäre vermutlich ein gcj java plugin zu schreiben bzw. mit dem
typ zusammenzuarbeiten der damit angefangen hat
und dann halt dazu eine erweiterung machen (plugin zum plugin)
vorteile einer solchen lsg.:
standard protokoll
standard tools
proxy wird gleich mitgeliefert
weniger arbeit die ich machen müsste / mehr interesse anderer
nachteile:
braucht man ein webserver wobei man den natuerlich auch einfach
in den server integrieren kann
sicherheit
overhead bei dem ganzen applet kram
hmmm


also ich habe es jetzt so gemacht
dass ich für jeden synchronen request eine neue connection mache
und der graph wurde zum ersten mal angezeigt !!

okay
es geht
ObjectOutputStream.reset war wichtig !! ;-) (nicht zum ersten mal)
nur dummerweise ist es sacklahm
deserialisierung des einfachen szenengrafen braucht 4sec. !!
echt übel
entweder nach einer alternativen serialisierungsgeschichte suchen
(habe ich schon angefangen - aber auf die schnelle nichts wirklich
brauchbares gefunden - evtl. karmi - auf jedenfall eine gute
problemanalyse)
